0. Setup Paths
[1]
import os
[2]
CUSTOM_MODEL_NAME = 'my_ssd_mobnet' 
PRETRAINED_MODEL_NAME = 'ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8'
PRETRAINED_MODEL_URL = 'http://download.tensorflow.org/models/object_detection/tf2/20200711/ssd_mobilenet_v2_fpnlite_320x320_coco17_tpu-8.tar.gz'
TF_RECORD_SCRIPT_NAME = 'generate_tfrecord.py'
LABEL_MAP_NAME = 'label_map.pbtxt'
[3]
paths = {
    'WORKSPACE_PATH': os.path.join('Tensorflow', 'workspace'),
    'SCRIPTS_PATH': os.path.join('Tensorflow','scripts'),
    'APIMODEL_PATH': os.path.join('Tensorflow','models'),
    'ANNOTATION_PATH': os.path.join('Tensorflow', 'workspace','annotations'),
    'IMAGE_PATH': os.path.join('Tensorflow', 'workspace','images'),
    'MODEL_PATH': os.path.join('Tensorflow', 'workspace','models'),
    'PRETRAINED_MODEL_PATH': os.path.join('Tensorflow', 'workspace','pre-trained-models'),
    'CHECKPOINT_PATH': os.path.join('Tensorflow', 'workspace','models',CUSTOM_MODEL_NAME), 
    'OUTPUT_PATH': os.path.join('Tensorflow', 'workspace','models',CUSTOM_MODEL_NAME, 'export'), 
    'TFJS_PATH':os.path.join('Tensorflow', 'workspace','models',CUSTOM_MODEL_NAME, 'tfjsexport'), 
    'TFLITE_PATH':os.path.join('Tensorflow', 'workspace','models',CUSTOM_MODEL_NAME, 'tfliteexport'), 
    'PROTOC_PATH':os.path.join('Tensorflow','protoc')
 }
[4]
files = {
    'PIPELINE_CONFIG':os.path.join('Tensorflow', 'workspace','models', CUSTOM_MODEL_NAME, 'pipeline.config'),
    'TF_RECORD_SCRIPT': os.path.join(paths['SCRIPTS_PATH'], TF_RECORD_SCRIPT_NAME), 
    'LABELMAP': os.path.join(paths['ANNOTATION_PATH'], LABEL_MAP_NAME)
}
[5]
for path in paths.values():
    if not os.path.exists(path):
        if os.name == 'posix':
            !mkdir -p {path}
        if os.name == 'nt':
            !mkdir {path}
1. Download TF Models Pretrained Models from Tensorflow Model Zoo and Install TFOD
[6]
# https://www.tensorflow.org/install/source_windows
[6]
if os.name=='nt':
    !pip install wget
    import wget
Requirement already satisfied: wget in d:\anpr\anprsys9\lib\site-packages (3.2)

[7]
if not os.path.exists(os.path.join(paths['APIMODEL_PATH'], 'research', 'object_detection')):
    !git clone https://github.com/tensorflow/models {paths['APIMODEL_PATH']}
[9]
!pip install numpy

[10]
# Install Tensorflow Object Detection 
if os.name=='posix':  
    !apt-get install protobuf-compiler
    !cd Tensorflow/models/research && protoc object_detection/protos/*.proto --python_out=. && cp object_detection/packages/tf2/setup.py . && python -m pip install . 
    
if os.name=='nt':
    url="https://github.com/protocolbuffers/protobuf/releases/download/v3.15.6/protoc-3.15.6-win64.zip"
    wget.download(url)
    !move protoc-3.15.6-win64.zip {paths['PROTOC_PATH']}
    !cd {paths['PROTOC_PATH']} && tar -xf protoc-3.15.6-win64.zip
    os.environ['PATH'] += os.pathsep + os.path.abspath(os.path.join(paths['PROTOC_PATH'], 'bin'))   
    !cd Tensorflow/models/research && protoc object_detection/protos/*.proto --python_out=. && copy object_detection\\packages\\tf2\\setup.py setup.py && python setup.py build && python setup.py install
    !cd Tensorflow/models/research/slim && pip install -e . 


[22]
VERIFICATION_SCRIPT = os.path.join(paths['APIMODEL_PATH'], 'research', 'object_detection', 'builders', 'model_builder_tf2_test.py')

[12]
!pip install tensorflow --upgrade

[14]
!pip install protobuf matplotlib==3.2


[16]
!pip install protobuf==3.20.*

[18]
!pip install Pillow


[20]
!pip install pyyaml

[27]
!pip install gin-config

[21]
!pip install tensorflow-addons

[7]
import object_detection
[8]
if os.name =='posix':
    !wget {PRETRAINED_MODEL_URL}
    !mv {PRETRAINED_MODEL_NAME+'.tar.gz'} {paths['PRETRAINED_MODEL_PATH']}
    !cd {paths['PRETRAINED_MODEL_PATH']} && tar -zxvf {PRETRAINED_MODEL_NAME+'.tar.gz'}
if os.name == 'nt':
    wget.download(PRETRAINED_MODEL_URL)
    !move {PRETRAINED_MODEL_NAME+'.tar.gz'} {paths['PRETRAINED_MODEL_PATH']}
    !cd {paths['PRETRAINED_MODEL_PATH']} && tar -zxvf {PRETRAINED_MODEL_NAME+'.tar.gz'}

2. Create Label Map
[9]
labels = [{'name':'licence', 'id':1}]

with open(files['LABELMAP'], 'w') as f:
    for label in labels:
        f.write('item { \n')
        f.write('\tname:\'{}\'\n'.format(label['name']))
        f.write('\tid:{}\n'.format(label['id']))
        f.write('}\n')
3. Create TF records
[10]
if not os.path.exists(files['TF_RECORD_SCRIPT']):
    !git clone https://github.com/nicknochnack/GenerateTFRecord {paths['SCRIPTS_PATH']}
[12]
!pip install pytz

[13]
!python {files['TF_RECORD_SCRIPT']} -x {os.path.join(paths['IMAGE_PATH'], 'train')} -l {files['LABELMAP']} -o {os.path.join(paths['ANNOTATION_PATH'], 'train.record')} 
!python {files['TF_RECORD_SCRIPT']} -x {os.path.join(paths['IMAGE_PATH'], 'test')} -l {files['LABELMAP']} -o {os.path.join(paths['ANNOTATION_PATH'], 'test.record')} 


4. Copy Model Config to Training Folder
[14]
if os.name =='posix':
    !cp {os.path.join(paths['PRETRAINED_MODEL_PATH'], PRETRAINED_MODEL_NAME, 'pipeline.config')} {os.path.join(paths['CHECKPOINT_PATH'])}
if os.name == 'nt':
    !copy {os.path.join(paths['PRETRAINED_MODEL_PATH'], PRETRAINED_MODEL_NAME, 'pipeline.config')} {os.path.join(paths['CHECKPOINT_PATH'])}
        1 file(s) copied.

5. Update Config For Transfer Learning
[15]
import tensorflow as tf
from object_detection.utils import config_util
from object_detection.protos import pipeline_pb2
from google.protobuf import text_format
[16]
config = config_util.get_configs_from_pipeline_file(files['PIPELINE_CONFIG'])
[17]
config
{'model': ssd {
   num_classes: 90
   image_resizer {
     fixed_shape_resizer {
       height: 320
       width: 320
     }
   }
   feature_extractor {
     type: "ssd_mobilenet_v2_fpn_keras"
     depth_multiplier: 1.0
     min_depth: 16
     conv_hyperparams {
       regularizer {
         l2_regularizer {
           weight: 3.9999998989515007e-05
         }
       }
       initializer {
         random_normal_initializer {
           mean: 0.0
           stddev: 0.009999999776482582
         }
       }
       activation: RELU_6
       batch_norm {
         decay: 0.996999979019165
         scale: true
         epsilon: 0.0010000000474974513
       }
     }
     use_depthwise: true
     override_base_feature_extractor_hyperparams: true
     fpn {
       min_level: 3
       max_level: 7
       additional_layer_depth: 128
     }
   }
   box_coder {
     faster_rcnn_box_coder {
       y_scale: 10.0
       x_scale: 10.0
       height_scale: 5.0
       width_scale: 5.0
     }
   }
   matcher {
     argmax_matcher {
       matched_threshold: 0.5
       unmatched_threshold: 0.5
       ignore_thresholds: false
       negatives_lower_than_unmatched: true
       force_match_for_each_row: true
       use_matmul_gather: true
     }
   }
   similarity_calculator {
     iou_similarity {
     }
   }
   box_predictor {
     weight_shared_convolutional_box_predictor {
       conv_hyperparams {
         regularizer {
           l2_regularizer {
             weight: 3.9999998989515007e-05
           }
         }
         initializer {
           random_normal_initializer {
             mean: 0.0
             stddev: 0.009999999776482582
           }
         }
         activation: RELU_6
         batch_norm {
           decay: 0.996999979019165
           scale: true
           epsilon: 0.0010000000474974513
         }
       }
       depth: 128
       num_layers_before_predictor: 4
       kernel_size: 3
       class_prediction_bias_init: -4.599999904632568
       share_prediction_tower: true
       use_depthwise: true
     }
   }
   anchor_generator {
     multiscale_anchor_generator {
       min_level: 3
       max_level: 7
       anchor_scale: 4.0
       aspect_ratios: 1.0
       aspect_ratios: 2.0
       aspect_ratios: 0.5
       scales_per_octave: 2
     }
   }
   post_processing {
     batch_non_max_suppression {
       score_threshold: 9.99999993922529e-09
       iou_threshold: 0.6000000238418579
       max_detections_per_class: 100
       max_total_detections: 100
       use_static_shapes: false
     }
     score_converter: SIGMOID
   }
   normalize_loss_by_num_matches: true
   loss {
     localization_loss {
       weighted_smooth_l1 {
       }
     }
     classification_loss {
       weighted_sigmoid_focal {
         gamma: 2.0
         alpha: 0.25
       }
     }
     classification_weight: 1.0
     localization_weight: 1.0
   }
   encode_background_as_zeros: true
   normalize_loc_loss_by_codesize: true
   inplace_batchnorm_update: true
   freeze_batchnorm: false
 },
 'train_config': batch_size: 128
 data_augmentation_options {
   random_horizontal_flip {
   }
 }
 data_augmentation_options {
   random_crop_image {
     min_object_covered: 0.0
     min_aspect_ratio: 0.75
     max_aspect_ratio: 3.0
     min_area: 0.75
     max_area: 1.0
     overlap_thresh: 0.0
   }
 }
 sync_replicas: true
 optimizer {
   momentum_optimizer {
     learning_rate {
       cosine_decay_learning_rate {
         learning_rate_base: 0.07999999821186066
         total_steps: 50000
         warmup_learning_rate: 0.026666000485420227
         warmup_steps: 1000
       }
     }
     momentum_optimizer_value: 0.8999999761581421
   }
   use_moving_average: false
 }
 fine_tune_checkpoint: "PATH_TO_BE_CONFIGURED"
 num_steps: 50000
 startup_delay_steps: 0.0
 replicas_to_aggregate: 8
 max_number_of_boxes: 100
 unpad_groundtruth_tensors: false
 fine_tune_checkpoint_type: "classification"
 fine_tune_checkpoint_version: V2,
 'train_input_config': label_map_path: "PATH_TO_BE_CONFIGURED"
 tf_record_input_reader {
   input_path: "PATH_TO_BE_CONFIGURED"
 },
 'eval_config': metrics_set: "coco_detection_metrics"
 use_moving_averages: false,
 'eval_input_configs': [label_map_path: "PATH_TO_BE_CONFIGURED"
 shuffle: false
 num_epochs: 1
 tf_record_input_reader {
   input_path: "PATH_TO_BE_CONFIGURED"
 }
 ],
 'eval_input_config': label_map_path: "PATH_TO_BE_CONFIGURED"
 shuffle: false
 num_epochs: 1
 tf_record_input_reader {
   input_path: "PATH_TO_BE_CONFIGURED"
 }}
[18]
pipeline_config = pipeline_pb2.TrainEvalPipelineConfig()
with tf.io.gfile.GFile(files['PIPELINE_CONFIG'], "r") as f:                                                                                                                                                                                                                     
    proto_str = f.read()                                                                                                                                                                                                                                          
    text_format.Merge(proto_str, pipeline_config)  
[19]
pipeline_config.model.ssd.num_classes = len(labels)
pipeline_config.train_config.batch_size = 4
pipeline_config.train_config.fine_tune_checkpoint = os.path.join(paths['PRETRAINED_MODEL_PATH'], PRETRAINED_MODEL_NAME, 'checkpoint', 'ckpt-0')
pipeline_config.train_config.fine_tune_checkpoint_type = "detection"
pipeline_config.train_input_reader.label_map_path= files['LABELMAP']
pipeline_config.train_input_reader.tf_record_input_reader.input_path[:] = [os.path.join(paths['ANNOTATION_PATH'], 'train.record')]
pipeline_config.eval_input_reader[0].label_map_path = files['LABELMAP']
pipeline_config.eval_input_reader[0].tf_record_input_reader.input_path[:] = [os.path.join(paths['ANNOTATION_PATH'], 'test.record')]
[20]
config_text = text_format.MessageToString(pipeline_config)                                                                                                                                                                                                        
with tf.io.gfile.GFile(files['PIPELINE_CONFIG'], "wb") as f:                                                                                                                                                                                                                     
    f.write(config_text)   
6. Train the model
[21]
TRAINING_SCRIPT = os.path.join(paths['APIMODEL_PATH'], 'research', 'object_detection', 'model_main_tf2.py')
[22]
command = "python {} --model_dir={} --pipeline_config_path={} --num_train_steps=10000".format(TRAINING_SCRIPT, paths['CHECKPOINT_PATH'],files['PIPELINE_CONFIG'])
[23]
print(command)
python Tensorflow\models\research\object_detection\model_main_tf2.py --model_dir=Tensorflow\workspace\models\my_ssd_mobnet --pipeline_config_path=Tensorflow\workspace\models\my_ssd_mobnet\pipeline.config --num_train_steps=10000

[24]
!pip install pycocotools

[25]
!pip install opencv-python

[26]
!pip install matplotlib==3.3.0

8. Load Train Model From Checkpoint
[28]
import os
import tensorflow as tf
from object_detection.utils import label_map_util
from object_detection.utils import visualization_utils as viz_utils
from object_detection.builders import model_builder
from object_detection.utils import config_util
[29]
# Load pipeline config and build a detection model
configs = config_util.get_configs_from_pipeline_file(files['PIPELINE_CONFIG'])
detection_model = model_builder.build(model_config=configs['model'], is_training=False)

# Restore checkpoint
ckpt = tf.compat.v2.train.Checkpoint(model=detection_model)
ckpt.restore(os.path.join(paths['CHECKPOINT_PATH'], 'ckpt-11')).expect_partial()

@tf.function
def detect_fn(image):
    image, shapes = detection_model.preprocess(image)
    prediction_dict = detection_model.predict(image, shapes)
    detections = detection_model.postprocess(prediction_dict, shapes)
    return detections
9. Detect from an Image
[30]
import cv2 
import numpy as np
from matplotlib import pyplot as plt
%matplotlib inline
[31]
category_index = label_map_util.create_category_index_from_labelmap(files['LABELMAP'])
[32]
IMAGE_PATH = os.path.join(paths['IMAGE_PATH'],'test', 'Cars425.png',)
[33]
img = cv2.imread(IMAGE_PATH)
image_np = np.array(img)

input_tensor = tf.convert_to_tensor(np.expand_dims(image_np, 0), dtype=tf.float32)
detections = detect_fn(input_tensor)

num_detections = int(detections.pop('num_detections'))
detections = {key: value[0, :num_detections].numpy()
              for key, value in detections.items()}
detections['num_detections'] = num_detections

# detection_classes should be ints.
detections['detection_classes'] = detections['detection_classes'].astype(np.int64)

label_id_offset = 1
image_np_with_detections = image_np.copy()

viz_utils.visualize_boxes_and_labels_on_image_array(
            image_np_with_detections,
            detections['detection_boxes'],
            detections['detection_classes']+label_id_offset,
            detections['detection_scores'],
            category_index,
            use_normalized_coordinates=True,
            max_boxes_to_draw=5,
            min_score_thresh=.8,
            agnostic_mode=False)

plt.imshow(cv2.cvtColor(image_np_with_detections, cv2.COLOR_BGR2RGB))
plt.show()

Apply OCR Detection
[34]
!pip install easyocr

[35]
!pip install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu117

[36]
import easyocr
[37]
detection_threshold = 0.7
[38]
image = image_np_with_detections
scores = list(filter(lambda x: x> detection_threshold, detections['detection_scores']))
boxes = detections['detection_boxes'][:len(scores)]
classes = detections['detection_classes'][:len(scores)]
[39]
scores
[0.8087304]
[40]
width = image.shape[1]
height = image.shape[0]
[41]
height
232
OCR Filtering
[42]
region_threshold = 0.07
[43]
def filter_text(region, ocr_result, region_threshold):
    rectangle_size = region.shape[0]*region.shape[1]
    
    plate = []
    
    for result in ocr_result:
        length = np.sum(np.subtract(result[0][1], result[0][0]))
        height = np.sum(np.subtract(result[0][1], result[0][0]))
        
        if length*height / rectangle_size > region_threshold:
            plate.append(result[1])
         
    return plate
Bring it together
[44]
def ocr_it(image, detection, detection_threshold, region_threshold):
    
    scores = list(filter(lambda x: x> detection_threshold, detections['detection_scores']))
    boxes = detections['detection_boxes'][:len(scores)]
    classes = detections['detection_classes'][:len(scores)]
    
    width = image.shape[1]
    height = image.shape[0]
    
    for idx, box in enumerate(boxes):
        roi = box*[height, width, height, width]
        region = image[int(roi[0]):int(roi[2]),int(roi[1]):int(roi[3])]
        reader = easyocr.Reader(['en'])
        ocr_result = reader.readtext(region)
    
    text = filter_text(region, ocr_result, region_threshold)
    
    try:
        x=text
        sent_database(x)
        y=sent_database(x)
    except:
        pass
    
    plt.imshow(cv2.cvtColor(region, cv2.COLOR_BGR2RGB))
    print(text)
    return text, region,
SQL query
[44]
!pip install mysql-connector-python


[45]
import mysql.connector
[46]
from mysql.connector import Error
[47]
def search_database(text):
    
    from datetime import date
    
    x=str(text)
    x = x.replace("[","")
    x = x.replace("]","")
    x = x.replace("'","")
    
    conn = mysql.connector.connect(
          user='root', password='', host='127.0.0.1', database='object_detection')
    
    cursor1 = conn.cursor()
    sql_insert ="UPDATE number_plate SET Status = 'IN' WHERE plate =%s"
    val = (x,)
    
    cursor1.execute(sql_insert, val)
        
    conn.commit()    
[77]
def sent_database(text):
    
    from datetime import date
    
    x=str(text)
    x = x.replace("[","")
    x = x.replace("]","")
    x = x.replace("'","")
    
    conn = mysql.connector.connect(
          user='root', password='', host='127.0.0.1', database='object_detection')
    
    sql_select_Query ="SELECT * FROM number_plate WHERE plate = %s"
    val = (x,)
    cursor = conn.cursor()
    
    cursor.execute(sql_select_Query,val)
        
    records = cursor.fetchall()
    
    for row in records:
        name=("Name="+row[1]+"       Identity="+row[3]+"         Plate="+row[2])
        
    conn.rollback()    
    conn.close()
    return name
[89]
def find_database(text):
    
    from datetime import date
    
    x=str(text)
    x = x.replace("[","")
    x = x.replace("]","")
    x = x.replace("'","")
    
    conn = mysql.connector.connect(
          user='root', password='', host='127.0.0.1', database='object_detection')
    
    sql_select_Query ="SELECT * FROM number_plate WHERE plate = %s"
    val = (x,)
    cursor = conn.cursor()
    
    cursor.execute(sql_select_Query,val)
        
    records = cursor.fetchall()
    
    for row in records:
           plate=row[2]
    
    if plate == " ":
        
        sql_insert ="INSERT INTO outsider (Identity,Plate,Status) VALUES (%s,%s,%s)"
        vals = ("outsider",plate,"IN")
        
    cursor.execute(sql_insert, vals)
        
    conn.commit()
   
Firebase
[45]
!pip install --upgrade firebase-admin


[48]
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

cred = credentials.Certificate('ftmk-parking-database-firebase-adminsdk-rio9q-16f1c1c2b9 (1).json')
firebase_admin.initialize_app(cred)

db = firestore.client()
[49]
def fire_database(text):
    
    from datetime import date
    
    x=str(text)
    x = x.replace("[","")
    x = x.replace("]","")
    x = x.replace("'","")
    
    doc_ref = db.collection(u'USER').document(u'B032010120')

    doc = doc_ref.get()
    values = {u'PLATE NO': u'(x)'}
    for values in doc.to_dict():      
            doc_ref.update({u'ENTRANCE_STAT': u'out'})
    
10. Real Time Detections from your Webcam
[46]
cap = cv2.VideoCapture(0)
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

while cap.isOpened(): 
    ret, frame = cap.read()
    image_np = np.array(frame)
    
    input_tensor = tf.convert_to_tensor(np.expand_dims(image_np, 0), dtype=tf.float32)
    detections = detect_fn(input_tensor)
    
    num_detections = int(detections.pop('num_detections'))
    detections = {key: value[0, :num_detections].numpy()
                  for key, value in detections.items()}
    detections['num_detections'] = num_detections

    # detection_classes should be ints.
    detections['detection_classes'] = detections['detection_classes'].astype(np.int64)

    label_id_offset = 1
    image_np_with_detections = image_np.copy()

    viz_utils.visualize_boxes_and_labels_on_image_array(
                image_np_with_detections,
                detections['detection_boxes'],
                detections['detection_classes']+label_id_offset,
                detections['detection_scores'],
                category_index,
                use_normalized_coordinates=True,
                max_boxes_to_draw=5,
                min_score_thresh=.8,
                agnostic_mode=False)
    
    try:
        text, region = ocr_it(image_np_with_detections, detections, detection_threshold, region_threshold)
        fire_database(text)
        
        
    except:
        pass


    cv2.imshow('object detection',  cv2.resize(image_np_with_detections, (800, 600)))
   
    if cv2.waitKey(10) & 0xFF == ord('q'):
        cap.release()
        cv2.destroyAllWindows()
        break
